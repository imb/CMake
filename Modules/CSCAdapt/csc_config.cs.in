/* Adapter executable.

The purpose of this adapter is to forward commands along to the CSC.EXE
interface from a CMake interface.

CMake grew up from a C/C++ world of compilers and linkers, but C# was
born in an age that took source code straight to its final form, without
an intermediate stage.

The adapter is really only needed to interact with the "Makefile"
generators, a Visual studio generator should proceed to build using a
proper csproj.

Command line arguments for C# are different than from C/C++, in so far
as the first argument is the program name. So keep that in mind when
reviewing the following rules for this adapter.

Arguments and Conventions:

    ARG0 - Subcommand. Subcommand's mimic the standard CMakeXXXInformation
    fields,

       compile_object
       shared_library
       link_exectuable
       
       (static_library and shared_module are not applicable)

    The sub-commands will take arguments that start with a "/" and
    directly forward them to the underlying csc. Any command with a "---"
    will be handled by the sub-command.

    Each subcommand has the following usage:

    compile_object
        --source : the source file.
        --object : a desired object file.

        Note: That we are doing some trickery here to "compile" objects.
*/

/* Helpful variables supplied to us via CMAKE. */
struct CMakeVars
{
    static public string CMAKE_COMMAND = "@CMAKE_COMMAND@";
    static public string CSC_COMPILER = "@_CMAKE_CSC_COMPILER@";

    static public string NormPath(string p) {
        return p.Replace("/", "\\");
    }
}

